name: Generate Release Notes

"on":
  release:
    types: [published]

permissions:
  contents: write

jobs:
  generate-release-notes:
    name: Generate AI-powered release notes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
      PIP_NO_PYTHON_VERSION_WARNING: '1'
      PIP_PROGRESS_BAR: 'off'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git operations
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai
      
      - name: Generate release notes
        id: generate_notes
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Extract tag name from GitHub ref
          TAG_NAME="${{ github.event.release.tag_name }}"
          echo "Generating release notes for tag: $TAG_NAME"
          
          # Generate release notes and save to file
          python .github/scripts/generate_release_notes.py "$TAG_NAME" --output /tmp/release_notes.md
          
          # Read the generated notes for GitHub API
          RELEASE_NOTES=$(cat /tmp/release_notes.md)
          
          # Escape special characters for JSON
          RELEASE_NOTES_ESCAPED=$(echo "$RELEASE_NOTES" | jq -Rs .)
          
          # Set output for next step
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Update release with generated notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseNotes = `${{ steps.generate_notes.outputs.notes }}`;
            
            try {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                body: releaseNotes
              });
              
              console.log('Successfully updated release notes');
            } catch (error) {
              console.error('Failed to update release notes:', error);
              // Don't fail the workflow if updating the release fails
              // The release notes were still generated and logged
            }
      
      - name: Upload release notes as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ github.event.release.tag_name }}
          path: /tmp/release_notes.md
          retention-days: 30